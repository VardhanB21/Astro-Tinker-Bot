
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
000000e9 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
000000e9  w      .debug_info	00000000 .hidden t1b_path_planner.c.5ccbdde9
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
0000039c g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000394 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000003dc g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000003c0 g     F .text	0000001c memset
00000054 g     F .text	00000340 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000003e0 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    3e000593          	addi	x11,x0,992
  1c:	    00000613          	addi	x12,x0,0
  20:	    37c000ef          	jal	x1,39c <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    38c000ef          	jal	x1,3c0 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    354000ef          	jal	x1,394 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###         _put_byte('\n');
     ### 
     ### */
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                         f4010113          	addi	x2,x2,-192
     ###     uint8_t path_planned[32];
     ###     // index to keep track of the path_planned array
     ###     uint8_t idx = 1;
     ### 
     ###     // ############# Add your code here #############
     ###      uint8_t nbr[31][4]={{1,0,0,0},{29,2,0,0},{8,3,1,0},{4,2,0,0},{6,5,3,0},{4,0,0,0},
  58:	                         00100793          	addi	x15,x0,1
  5c:	                         04f12223          	sw	x15,68(x2)
  60:	                         21d00793          	addi	x15,x0,541
  64:	                         04f12423          	sw	x15,72(x2)
  68:	                         000107b7          	lui	x15,0x10
  6c:	                         30878793          	addi	x15,x15,776 # 10308 <__flash_size+0xfb08>
  70:	                         04f12623          	sw	x15,76(x2)
  74:	                         20400793          	addi	x15,x0,516
  78:	                         04f12823          	sw	x15,80(x2)
  7c:	                         000307b7          	lui	x15,0x30
  80:	                         50678793          	addi	x15,x15,1286 # 30506 <__flash_size+0x2fd06>
  84:	                         04f12a23          	sw	x15,84(x2)
  88:	                         00400793          	addi	x15,x0,4
  8c:	                         04f12c23          	sw	x15,88(x2)
  90:	                         40700793          	addi	x15,x0,1031
  94:	                         04f12e23          	sw	x15,92(x2)
  98:	                         60800793          	addi	x15,x0,1544
  9c:	                         06f12023          	sw	x15,96(x2)
  a0:	                         020717b7          	lui	x15,0x2071
  a4:	                         90c78793          	addi	x15,x15,-1780 # 207090c <__global_pointer$+0x7010c>
  a8:	                         06f12223          	sw	x15,100(x2)
  ac:	                         000817b7          	lui	x15,0x81
  b0:	                         a0b78793          	addi	x15,x15,-1525 # 80a0b <__flash_size+0x8020b>
  b4:	                         06f12423          	sw	x15,104(x2)
  b8:	                         00900793          	addi	x15,x0,9
  bc:	                         06f12623          	sw	x15,108(x2)
  c0:	                         06f12823          	sw	x15,112(x2)
  c4:	                         000017b7          	lui	x15,0x1
  c8:	                         80d78713          	addi	x14,x15,-2035 # 80d <__flash_size+0xd>
  cc:	                         06e12a23          	sw	x14,116(x2)
  d0:	                         c0e78713          	addi	x14,x15,-1010
  d4:	                         06e12c23          	sw	x14,120(x2)
  d8:	                         000d1737          	lui	x14,0xd1
  dc:	                         f1070713          	addi	x14,x14,-240 # d0f10 <__flash_size+0xd0710>
  e0:	                         06e12e23          	sw	x14,124(x2)
  e4:	                         00e00713          	addi	x14,x0,14
  e8:	                         08e12023          	sw	x14,128(x2)
  ec:	                         000e1737          	lui	x14,0xe1
  f0:	                         11270713          	addi	x14,x14,274 # e1112 <__flash_size+0xe0912>
  f4:	                         08e12223          	sw	x14,132(x2)
  f8:	                         01000713          	addi	x14,x0,16
  fc:	                         08e12423          	sw	x14,136(x2)
 100:	                         01378713          	addi	x14,x15,19
 104:	                         08e12623          	sw	x14,140(x2)
 108:	                         21478713          	addi	x14,x15,532
 10c:	                         08e12823          	sw	x14,144(x2)
 110:	                         13152737          	lui	x14,0x13152
 114:	                         81d70713          	addi	x14,x14,-2019 # 1315181d <__global_pointer$+0x1115101d>
 118:	                         08e12a23          	sw	x14,148(x2)
 11c:	                         00141737          	lui	x14,0x141
 120:	                         61770713          	addi	x14,x14,1559 # 141617 <__flash_size+0x140e17>
 124:	                         41978793          	addi	x15,x15,1049
 128:	                         08e12c23          	sw	x14,152(x2)
 12c:	                         0af12223          	sw	x15,164(x2)
 130:	                         01500713          	addi	x14,x0,21
 134:	                         000027b7          	lui	x15,0x2
 138:	                         08e12e23          	sw	x14,156(x2)
 13c:	                         0ae12023          	sw	x14,160(x2)
 140:	                         81a78713          	addi	x14,x15,-2022 # 181a <__flash_size+0x101a>
 144:	                         0ae12423          	sw	x14,168(x2)
 148:	                         a1d78793          	addi	x15,x15,-1507
 14c:	                         00192737          	lui	x14,0x192
 150:	                         0af12a23          	sw	x15,180(x2)
 154:	                         b1c70713          	addi	x14,x14,-1252 # 191b1c <__flash_size+0x19131c>
 158:	                         000117b7          	lui	x15,0x11
 15c:	                         0ae12623          	sw	x14,172(x2)
 160:	                         41c78793          	addi	x15,x15,1052 # 1141c <__flash_size+0x10c1c>
 164:	                         01a00713          	addi	x14,x0,26
 168:	                         0af12c23          	sw	x15,184(x2)
 16c:	                         0a012e23          	sw	x0,188(x2)
 170:	                         0ae12823          	sw	x14,176(x2)
     ###    {25,20,0,0},{26,24,0,0},{28,27,25,0},{26,0,0,0},{29,26,0,0},{28,20,1,0},
     ###    };
     ### 
     ###     uint8_t  b,c=0,reverse_path_planned[32];
     ### 
     ###    if(START_POINT<END_POINT+1){
 174:	                         020007b7          	lui	x15,0x2000
 178:	                         0047c683          	lbu	x13,4(x15) # 2000004 <__bss_end+0x4>
 17c:	                         0007c703          	lbu	x14,0(x15)
 180:	                         0ff6f693          	andi	x13,x13,255
 184:	                         0ff77713          	andi	x14,x14,255
 188:	         /-------------- 0ee6ec63          	bltu	x13,x14,280 <__ram_size+0x180>
     ###        path_planned[0]=START_POINT;
 18c:	         |               0007c703          	lbu	x14,0(x15)
     ###        b=START_POINT;
     ###        while(b!=END_POINT){
 190:	         |               02000637          	lui	x12,0x2000
     ###         c=0;
     ###         if(b==9 && END_POINT>=12){
 194:	         |               00900813          	addi	x16,x0,9
     ###        path_planned[0]=START_POINT;
 198:	         |               02e10223          	sb	x14,36(x2)
     ###        b=START_POINT;
 19c:	         |               0007c703          	lbu	x14,0(x15)
     ###          path_planned[idx]=8;    
     ###         }else if(b==21 && END_POINT>=24){
 1a0:	         |               01500893          	addi	x17,x0,21
     ###     uint8_t idx = 1;
 1a4:	         |               00100793          	addi	x15,x0,1
     ###        b=START_POINT;
 1a8:	         |               0ff77713          	andi	x14,x14,255
     ###         }else if(b==21 && END_POINT>=24){
 1ac:	         |               01700313          	addi	x6,x0,23
     ###           path_planned[idx]=20; 
 1b0:	         |               01400e13          	addi	x28,x0,20
     ###         if(b==9 && END_POINT>=12){
 1b4:	         |               00b00e93          	addi	x29,x0,11
     ###          path_planned[idx]=8;    
 1b8:	         |               00800f13          	addi	x30,x0,8
     ###        while(b!=END_POINT){
 1bc:	         |     /-------> 00464683          	lbu	x13,4(x12) # 2000004 <__bss_end+0x4>
 1c0:	         |     |         0ff6f693          	andi	x13,x13,255
 1c4:	         |     |     /-- 02e69463          	bne	x13,x14,1ec <__ram_size+0xec>
     ###        }
     ###    }
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 1c8:	      /--|-----|-----|-> 00000713          	addi	x14,x0,0
     ###         NODE_POINT = path_planned[i];
 1cc:	      |  |     |     |   020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 1d0:	/--/--|--|-----|-----|-X 1af74663          	blt	x14,x15,37c <__ram_size+0x27c>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 1d4:	|  |  |  |     |     |   020007b7          	lui	x15,0x2000
 1d8:	|  |  |  |     |     |   00100713          	addi	x14,x0,1
 1dc:	|  |  |  |     |     |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
 1e0:	|  |  |  |     |     |   00000513          	addi	x10,x0,0
 1e4:	|  |  |  |     |     |   0c010113          	addi	x2,x2,192
 1e8:	|  |  |  |     |     |   00008067          	jalr	x0,0(x1)
     ###         if(b==9 && END_POINT>=12){
 1ec:	|  |  |  |     |  /--\-X 03071a63          	bne	x14,x16,220 <__ram_size+0x120>
 1f0:	|  |  |  |     |  |      00464683          	lbu	x13,4(x12)
 1f4:	|  |  |  |     |  |      0ff6f693          	andi	x13,x13,255
 1f8:	|  |  |  |     |  |  /-- 04def463          	bgeu	x29,x13,240 <__ram_size+0x140>
     ###          path_planned[idx]=8;    
 1fc:	|  |  |  |     |  |  |   0c010713          	addi	x14,x2,192
 200:	|  |  |  |     |  |  |   00f70733          	add	x14,x14,x15
 204:	|  |  |  |     |  |  |   f7e70223          	sb	x30,-156(x14)
     ###        b=path_planned[idx];
 208:	|  |  |  |  /--|--|--|-> 0c010713          	addi	x14,x2,192
 20c:	|  |  |  |  |  |  |  |   00f70733          	add	x14,x14,x15
     ###        idx++;
 210:	|  |  |  |  |  |  |  |   00178793          	addi	x15,x15,1
     ###        b=path_planned[idx];
 214:	|  |  |  |  |  |  |  |   f6474703          	lbu	x14,-156(x14)
     ###        idx++;
 218:	|  |  |  |  |  |  |  |   0ff7f793          	andi	x15,x15,255
 21c:	|  |  |  |  |  \--|--|-- fa1ff06f          	jal	x0,1bc <__ram_size+0xbc>
     ###         }else if(b==21 && END_POINT>=24){
 220:	|  |  |  |  |     \--+-X 03171063          	bne	x14,x17,240 <__ram_size+0x140>
 224:	|  |  |  |  |        |   00464683          	lbu	x13,4(x12)
 228:	|  |  |  |  |        |   0ff6f693          	andi	x13,x13,255
 22c:	|  |  |  |  |        +-- 00d37a63          	bgeu	x6,x13,240 <__ram_size+0x140>
     ###           path_planned[idx]=20; 
 230:	|  |  |  |  |        |   0c010713          	addi	x14,x2,192
 234:	|  |  |  |  |        |   00f70733          	add	x14,x14,x15
 238:	|  |  |  |  |        |   f7c70223          	sb	x28,-156(x14)
 23c:	|  |  |  |  +--------|-- fcdff06f          	jal	x0,208 <__ram_size+0x108>
     ###         if(nbr[b][c]<END_POINT+1){
 240:	|  |  |  |  |        \-> 00271713          	slli	x14,x14,0x2
 244:	|  |  |  |  |            0c010593          	addi	x11,x2,192
     ###         }else if(b==21 && END_POINT>=24){
 248:	|  |  |  |  |            00000693          	addi	x13,x0,0
     ###         if(nbr[b][c]<END_POINT+1){
 24c:	|  |  |  |  |            00e58733          	add	x14,x11,x14
 250:	|  |  |  |  |     /----> 00464583          	lbu	x11,4(x12)
 254:	|  |  |  |  |     |      00d70533          	add	x10,x14,x13
 258:	|  |  |  |  |     |      f8454503          	lbu	x10,-124(x10)
 25c:	|  |  |  |  |     |      0ff5f593          	andi	x11,x11,255
 260:	|  |  |  |  |     |  /-- 00a5ea63          	bltu	x11,x10,274 <__ram_size+0x174>
     ###         path_planned[idx]=nbr[b][c];
 264:	|  |  |  |  |     |  |   0c010713          	addi	x14,x2,192
 268:	|  |  |  |  |     |  |   00f70733          	add	x14,x14,x15
 26c:	|  |  |  |  |     |  |   f6a70223          	sb	x10,-156(x14)
     ###         break;
 270:	|  |  |  |  \-----|--|-- f99ff06f          	jal	x0,208 <__ram_size+0x108>
     ###         c++;
 274:	|  |  |  |        |  \-> 00168693          	addi	x13,x13,1 # 2000001 <__bss_end+0x1>
 278:	|  |  |  |        |      0ff6f693          	andi	x13,x13,255
     ###         while(1){
 27c:	|  |  |  |        \----- fd5ff06f          	jal	x0,250 <__ram_size+0x150>
     ###     reverse_path_planned[0]=END_POINT;
 280:	|  |  |  \-------------> 0047c703          	lbu	x14,4(x15)
     ###        while(b!=START_POINT){
 284:	|  |  |                  02000637          	lui	x12,0x2000
     ###          if(b==9 && START_POINT>=12){
 288:	|  |  |                  00900813          	addi	x16,x0,9
     ###     reverse_path_planned[0]=END_POINT;
 28c:	|  |  |                  00e10223          	sb	x14,4(x2)
     ###        b=END_POINT;
 290:	|  |  |                  0047c703          	lbu	x14,4(x15)
     ###         }else if(b==21 && START_POINT>=24){
 294:	|  |  |                  01500893          	addi	x17,x0,21
     ###     uint8_t idx = 1;
 298:	|  |  |                  00100793          	addi	x15,x0,1
     ###        b=END_POINT;
 29c:	|  |  |                  0ff77713          	andi	x14,x14,255
     ###         }else if(b==21 && START_POINT>=24){
 2a0:	|  |  |                  01700313          	addi	x6,x0,23
     ###           reverse_path_planned[idx]=20; 
 2a4:	|  |  |                  01400e13          	addi	x28,x0,20
     ###          if(b==9 && START_POINT>=12){
 2a8:	|  |  |                  00b00e93          	addi	x29,x0,11
     ###          reverse_path_planned[idx]=8;    
 2ac:	|  |  |                  00800f13          	addi	x30,x0,8
     ###        while(b!=START_POINT){
 2b0:	|  |  |        /-------> 00064683          	lbu	x13,0(x12) # 2000000 <__bss_end>
 2b4:	|  |  |        |         0ff6f693          	andi	x13,x13,255
 2b8:	|  |  |        |  /----- 02e69863          	bne	x13,x14,2e8 <__ram_size+0x1e8>
     ###        for(int i=a-1;i>=0;i--){
 2bc:	|  |  |        |  |      fff78713          	addi	x14,x15,-1
 2c0:	|  |  |        |  |      02410693          	addi	x13,x2,36
 2c4:	|  |  |        |  |      fff00613          	addi	x12,x0,-1
 2c8:	|  |  \--------|--|--/-X f0c700e3          	beq	x14,x12,1c8 <__ram_size+0xc8>
     ###         path_planned[a-1-i]=reverse_path_planned[i];
 2cc:	|  |           |  |  |   00410593          	addi	x11,x2,4
 2d0:	|  |           |  |  |   00e585b3          	add	x11,x11,x14
 2d4:	|  |           |  |  |   0005c583          	lbu	x11,0(x11)
     ###        for(int i=a-1;i>=0;i--){
 2d8:	|  |           |  |  |   fff70713          	addi	x14,x14,-1
 2dc:	|  |           |  |  |   00168693          	addi	x13,x13,1
     ###         path_planned[a-1-i]=reverse_path_planned[i];
 2e0:	|  |           |  |  |   feb68fa3          	sb	x11,-1(x13)
     ###        for(int i=a-1;i>=0;i--){
 2e4:	|  |           |  |  \-- fe5ff06f          	jal	x0,2c8 <__ram_size+0x1c8>
     ###          if(b==9 && START_POINT>=12){
 2e8:	|  |           |  \--/-X 03071a63          	bne	x14,x16,31c <__ram_size+0x21c>
 2ec:	|  |           |     |   00064683          	lbu	x13,0(x12)
 2f0:	|  |           |     |   0ff6f693          	andi	x13,x13,255
 2f4:	|  |           |  /--|-- 04def463          	bgeu	x29,x13,33c <__ram_size+0x23c>
     ###          reverse_path_planned[idx]=8;    
 2f8:	|  |           |  |  |   0c010713          	addi	x14,x2,192
 2fc:	|  |           |  |  |   00f70733          	add	x14,x14,x15
 300:	|  |           |  |  |   f5e70223          	sb	x30,-188(x14)
     ###        b=reverse_path_planned[idx];
 304:	|  |        /--|--|--|-> 0c010713          	addi	x14,x2,192
 308:	|  |        |  |  |  |   00f70733          	add	x14,x14,x15
     ###        idx++;
 30c:	|  |        |  |  |  |   00178793          	addi	x15,x15,1
     ###        b=reverse_path_planned[idx];
 310:	|  |        |  |  |  |   f4474703          	lbu	x14,-188(x14)
     ###        idx++;
 314:	|  |        |  |  |  |   0ff7f793          	andi	x15,x15,255
 318:	|  |        |  \--|--|-- f99ff06f          	jal	x0,2b0 <__ram_size+0x1b0>
     ###         }else if(b==21 && START_POINT>=24){
 31c:	|  |        |     +--\-X 03171063          	bne	x14,x17,33c <__ram_size+0x23c>
 320:	|  |        |     |      00064683          	lbu	x13,0(x12)
 324:	|  |        |     |      0ff6f693          	andi	x13,x13,255
 328:	|  |        |     +----- 00d37a63          	bgeu	x6,x13,33c <__ram_size+0x23c>
     ###           reverse_path_planned[idx]=20; 
 32c:	|  |        |     |      0c010713          	addi	x14,x2,192
 330:	|  |        |     |      00f70733          	add	x14,x14,x15
 334:	|  |        |     |      f5c70223          	sb	x28,-188(x14)
 338:	|  |        +-----|----- fcdff06f          	jal	x0,304 <__ram_size+0x204>
     ###         if(nbr[b][c]<START_POINT+1){
 33c:	|  |        |     \----> 00271713          	slli	x14,x14,0x2
 340:	|  |        |            0c010593          	addi	x11,x2,192
     ###         }else if(b==21 && START_POINT>=24){
 344:	|  |        |            00000693          	addi	x13,x0,0
     ###         if(nbr[b][c]<START_POINT+1){
 348:	|  |        |            00e58733          	add	x14,x11,x14
 34c:	|  |        |     /----> 00064583          	lbu	x11,0(x12)
 350:	|  |        |     |      00d70533          	add	x10,x14,x13
 354:	|  |        |     |      f8454503          	lbu	x10,-124(x10)
 358:	|  |        |     |      0ff5f593          	andi	x11,x11,255
 35c:	|  |        |     |  /-- 00a5ea63          	bltu	x11,x10,370 <__ram_size+0x270>
     ###         reverse_path_planned[idx]=nbr[b][c];
 360:	|  |        |     |  |   0c010713          	addi	x14,x2,192
 364:	|  |        |     |  |   00f70733          	add	x14,x14,x15
 368:	|  |        |     |  |   f4a70223          	sb	x10,-188(x14)
     ###         break;
 36c:	|  |        \-----|--|-- f99ff06f          	jal	x0,304 <__ram_size+0x204>
     ###         c++;
 370:	|  |              |  \-> 00168693          	addi	x13,x13,1
 374:	|  |              |      0ff6f693          	andi	x13,x13,255
     ###         while(1){
 378:	|  |              \----- fd5ff06f          	jal	x0,34c <__ram_size+0x24c>
     ###         NODE_POINT = path_planned[i];
 37c:	|  \-------------------> 02410613          	addi	x12,x2,36
 380:	|                        00e60633          	add	x12,x12,x14
 384:	|                        00064603          	lbu	x12,0(x12)
     ###     for (int i = 0; i < idx; ++i) {
 388:	|                        00170713          	addi	x14,x14,1
     ###         NODE_POINT = path_planned[i];
 38c:	|                        00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 390:	\----------------------- e41ff06f          	jal	x0,1d0 <__ram_size+0xd0>

00000394 <_set_tls>:
 394:	00050213          	addi	x4,x10,0
 398:	00008067          	jalr	x0,0(x1)

0000039c <memcpy>:
 39c:	       00050313          	addi	x6,x10,0
 3a0:	/----- 00060e63          	beq	x12,x0,3bc <memcpy+0x20>
 3a4:	|  /-> 00058383          	lb	x7,0(x11)
 3a8:	|  |   00730023          	sb	x7,0(x6)
 3ac:	|  |   fff60613          	addi	x12,x12,-1
 3b0:	|  |   00130313          	addi	x6,x6,1
 3b4:	|  |   00158593          	addi	x11,x11,1
 3b8:	|  \-- fe0616e3          	bne	x12,x0,3a4 <memcpy+0x8>
 3bc:	\----> 00008067          	jalr	x0,0(x1)

000003c0 <memset>:
 3c0:	       00050313          	addi	x6,x10,0
 3c4:	/----- 00060a63          	beq	x12,x0,3d8 <memset+0x18>
 3c8:	|  /-> 00b30023          	sb	x11,0(x6)
 3cc:	|  |   fff60613          	addi	x12,x12,-1
 3d0:	|  |   00130313          	addi	x6,x6,1
 3d4:	|  \-- fe061ae3          	bne	x12,x0,3c8 <memset+0x8>
 3d8:	\----> 00008067          	jalr	x0,0(x1)

000003dc <__text_end>:
 3dc:	0000                	c.unimp
	...
